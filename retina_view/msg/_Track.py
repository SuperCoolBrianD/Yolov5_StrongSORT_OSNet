# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from retina_view/Track.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Track(genpy.Message):
  _md5sum = "2ef37fd836b6f696a2d2f94aa59e68cd"
  _type = "retina_view/Track"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 track_id
uint8 track_state
uint8 track_count
uint16 track_range
int8 track_angle
uint8 track_type
uint8 track_activity
uint8 track_reliability
"""
  __slots__ = ['track_id','track_state','track_count','track_range','track_angle','track_type','track_activity','track_reliability']
  _slot_types = ['uint32','uint8','uint8','uint16','int8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       track_id,track_state,track_count,track_range,track_angle,track_type,track_activity,track_reliability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.track_id is None:
        self.track_id = 0
      if self.track_state is None:
        self.track_state = 0
      if self.track_count is None:
        self.track_count = 0
      if self.track_range is None:
        self.track_range = 0
      if self.track_angle is None:
        self.track_angle = 0
      if self.track_type is None:
        self.track_type = 0
      if self.track_activity is None:
        self.track_activity = 0
      if self.track_reliability is None:
        self.track_reliability = 0
    else:
      self.track_id = 0
      self.track_state = 0
      self.track_count = 0
      self.track_range = 0
      self.track_angle = 0
      self.track_type = 0
      self.track_activity = 0
      self.track_reliability = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2BHb3B().pack(_x.track_id, _x.track_state, _x.track_count, _x.track_range, _x.track_angle, _x.track_type, _x.track_activity, _x.track_reliability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.track_id, _x.track_state, _x.track_count, _x.track_range, _x.track_angle, _x.track_type, _x.track_activity, _x.track_reliability,) = _get_struct_I2BHb3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2BHb3B().pack(_x.track_id, _x.track_state, _x.track_count, _x.track_range, _x.track_angle, _x.track_type, _x.track_activity, _x.track_reliability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.track_id, _x.track_state, _x.track_count, _x.track_range, _x.track_angle, _x.track_type, _x.track_activity, _x.track_reliability,) = _get_struct_I2BHb3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2BHb3B = None
def _get_struct_I2BHb3B():
    global _struct_I2BHb3B
    if _struct_I2BHb3B is None:
        _struct_I2BHb3B = struct.Struct("<I2BHb3B")
    return _struct_I2BHb3B
