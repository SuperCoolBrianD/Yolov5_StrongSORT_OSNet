# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets, uic
from PyQt6.QtWidgets import QFileDialog
from PyQt6.QtGui import QImage
import cv2, imutils
from fusion_utils.radar_utils import *
import rosbag
from PyQt6.QtCore import pyqtSignal
from rosbags.rosbag2 import Reader
from rosbags.serde import deserialize_cdr

def empty():
    pass

def get_img_local(event, x, y, flags, param):
    global nxt
    global img_coord
    if event == cv2.EVENT_LBUTTONDOWN:
        print(x, y)
        nxt = True
        img_coord = (x, y)


# class Ui_MainWindow(object):
#     def __init__(self):
#         bag = rosbag.Bag("record/working.bag")
#         self.bags = bag.read_messages()
#         self.frame = SRS_data_frame()
#         self.image_np = None
#         self.intrinsic = [747.9932, 0., 655.5036, 0., 746.6126, 390.1168, 0., 0., 1.]
#         self.mtx = np.eye(3)
#         self.sensor = None
#         self.npts = None
#         self.arr_all = None
#         self.arr_concat = None
#         self.arr = None
#         self.pc = None
#         self.ped_box = None
#         self.cls = None
#         self.new_cam1 = None
#         self.RX = 0
#         self.RY = 0
#         self.RZ = 0
#         self.TX = 0
#         self.TY = 0
#         self.TZ = 0
#         self.r2c = 0
#     def setupUi(self, MainWindow):
#         MainWindow.setObjectName("MainWindow")
#         MainWindow.resize(800, 600)
#         self.centralwidget = QtWidgets.QWidget(MainWindow)
#         self.centralwidget.setObjectName("centralwidget")
#         self.image = QtWidgets.QLabel(self.centralwidget)
#         self.image.setGeometry(QtCore.QRect(50, 20, 671, 331))
#         self.image.setObjectName("image")
#         self.widget = QtWidgets.QWidget(self.centralwidget)
#         self.widget.setGeometry(QtCore.QRect(50, 390, 411, 152))
#         self.widget.setObjectName("widget")
#         self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget)
#         self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
#         self.horizontalLayout_7.setObjectName("horizontalLayout_7")
#         self.verticalLayout_2 = QtWidgets.QVBoxLayout()
#         self.verticalLayout_2.setObjectName("verticalLayout_2")
#         self.horizontalLayout = QtWidgets.QHBoxLayout()
#         self.horizontalLayout.setObjectName("horizontalLayout")
#         self.rx = QtWidgets.QLabel(self.widget)
#         self.rx.setObjectName("rx")
#         self.horizontalLayout.addWidget(self.rx)
#         self.horizontalSlider = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider.setObjectName("horizontalSlider")
#         self.horizontalLayout.addWidget(self.horizontalSlider)
#         self.verticalLayout_2.addLayout(self.horizontalLayout)
#         self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
#         self.horizontalLayout_6.setObjectName("horizontalLayout_6")
#         self.ry = QtWidgets.QLabel(self.widget)
#         self.ry.setObjectName("ry")
#         self.horizontalLayout_6.addWidget(self.ry)
#         self.horizontalSlider_6 = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider_6.setObjectName("horizontalSlider_6")
#         self.horizontalLayout_6.addWidget(self.horizontalSlider_6)
#         self.verticalLayout_2.addLayout(self.horizontalLayout_6)
#         self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
#         self.horizontalLayout_2.setObjectName("horizontalLayout_2")
#         self.rz = QtWidgets.QLabel(self.widget)
#         self.rz.setObjectName("rz")
#         self.horizontalLayout_2.addWidget(self.rz)
#         self.horizontalSlider_2 = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider_2.setObjectName("horizontalSlider_2")
#         self.horizontalLayout_2.addWidget(self.horizontalSlider_2)
#         self.verticalLayout_2.addLayout(self.horizontalLayout_2)
#         self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
#         self.horizontalLayout_3.setObjectName("horizontalLayout_3")
#         self.tx = QtWidgets.QLabel(self.widget)
#         self.tx.setObjectName("tx")
#         self.horizontalLayout_3.addWidget(self.tx)
#         self.horizontalSlider_3 = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider_3.setObjectName("horizontalSlider_3")
#         self.horizontalLayout_3.addWidget(self.horizontalSlider_3)
#         self.verticalLayout_2.addLayout(self.horizontalLayout_3)
#         self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
#         self.horizontalLayout_4.setObjectName("horizontalLayout_4")
#         self.ty = QtWidgets.QLabel(self.widget)
#         self.ty.setFrameShape(QtWidgets.QFrame.NoFrame)
#         self.ty.setObjectName("ty")
#         self.horizontalLayout_4.addWidget(self.ty)
#         self.horizontalSlider_4 = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider_4.setObjectName("horizontalSlider_4")
#         self.horizontalLayout_4.addWidget(self.horizontalSlider_4)
#         self.verticalLayout_2.addLayout(self.horizontalLayout_4)
#         self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
#         self.horizontalLayout_5.setObjectName("horizontalLayout_5")
#         self.tz = QtWidgets.QLabel(self.widget)
#         self.tz.setObjectName("tz")
#         self.horizontalLayout_5.addWidget(self.tz)
#         self.horizontalSlider_5 = QtWidgets.QSlider(self.widget)
#         self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
#         self.horizontalSlider_5.setObjectName("horizontalSlider_5")
#         self.horizontalLayout_5.addWidget(self.horizontalSlider_5)
#         self.verticalLayout_2.addLayout(self.horizontalLayout_5)
#         self.horizontalLayout_7.addLayout(self.verticalLayout_2)
#         self.verticalLayout = QtWidgets.QVBoxLayout()
#         self.verticalLayout.setObjectName("verticalLayout")
#         self.rx_value = QtWidgets.QLabel(self.widget)
#         self.rx_value.setObjectName("rx_value")
#         self.verticalLayout.addWidget(self.rx_value)
#         self.ry_value = QtWidgets.QLabel(self.widget)
#         self.ry_value.setObjectName("ry_value")
#         self.verticalLayout.addWidget(self.ry_value)
#         self.rz_value = QtWidgets.QLabel(self.widget)
#         self.rz_value.setObjectName("rz_value")
#         self.verticalLayout.addWidget(self.rz_value)
#         self.tx_value = QtWidgets.QLabel(self.widget)
#         self.tx_value.setObjectName("tx_value")
#         self.verticalLayout.addWidget(self.tx_value)
#         self.ty_value = QtWidgets.QLabel(self.widget)
#         self.ty_value.setObjectName("ty_value")
#         self.verticalLayout.addWidget(self.ty_value)
#         self.tz_value = QtWidgets.QLabel(self.widget)
#         self.tz_value.setObjectName("tz_value")
#         self.verticalLayout.addWidget(self.tz_value)
#         self.horizontalLayout_7.addLayout(self.verticalLayout)
#         self.widget1 = QtWidgets.QWidget(self.centralwidget)
#         self.widget1.setGeometry(QtCore.QRect(530, 440, 186, 27))
#         self.widget1.setObjectName("widget1")
#         self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.widget1)
#         self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
#         self.horizontalLayout_8.setObjectName("horizontalLayout_8")
#         self.pushButton = QtWidgets.QPushButton(self.widget1)
#         self.pushButton.setObjectName("pushButton")
#         self.horizontalLayout_8.addWidget(self.pushButton)
#         self.pushButton_2 = QtWidgets.QPushButton(self.widget1)
#         self.pushButton_2.setObjectName("pushButton_2")
#         self.horizontalLayout_8.addWidget(self.pushButton_2)
#         MainWindow.setCentralWidget(self.centralwidget)
#         self.menubar = QtWidgets.QMenuBar(MainWindow)
#         self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
#         self.menubar.setObjectName("menubar")
#         MainWindow.setMenuBar(self.menubar)
#         self.statusbar = QtWidgets.QStatusBar(MainWindow)
#         self.statusbar.setObjectName("statusbar")
#         MainWindow.setStatusBar(self.statusbar)
from PyQt5.QtWidgets import QMainWindow
class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        print('f')
        QtWidgets.QMainWindow.__init__(self)
        self.reader =  Reader('record/remote')
        self.reader.open()
        self.connections = [x for x in self.reader.connections if x.topic in ['/Radar', '/Camera']]
        self.bags = self.reader.messages(connections=self.connections)
        self.frame = SRS_data_frame()
        self.image_np = None
        self.intrinsic = [747.9932, 0., 655.5036, 0., 746.6126, 390.1168, 0., 0., 1.]
        self.mtx = np.eye(3)
        self.sensor = None
        self.npts = None
        self.arr_all = None
        self.arr_concat = None
        self.arr = None
        self.pc = None
        self.ped_box = None
        self.cls = None
        self.new_cam1 = None
        self.RX = 0
        self.RY = 0
        self.RZ = 0
        self.TX = 0
        self.TY = 0
        self.TZ = 0
        self.r2c = 0
        self.connection = None
        self.timestamp = None
        self.rawdata = None
        self.msg = None

        self.ui = uic.loadUi('UI.ui', self)

        self.horizontalSlider.setMaximum(314)    # rx
        self.horizontalSlider_6.setMaximum(314)  # ry
        self.horizontalSlider_2.setMaximum(314)  # rz
        self.horizontalSlider_3.setMaximum(100)  # tx
        self.horizontalSlider_4.setMaximum(100)  # ty
        self.horizontalSlider_5.setMaximum(100)  # tz

        self.load_frame()
        # self.retranslateUi(MainWindow)
        self.ry_value.setText("0")
        self.rz_value.setText("0")
        self.tx_value.setText("0")
        self.ty_value.setText("0")
        self.tz_value.setText("0")
        self.horizontalSlider.valueChanged.connect(self.load_rx) # type: ignore
        self.horizontalSlider_6.valueChanged.connect(self.load_ry)
        self.horizontalSlider_2.valueChanged.connect(self.load_rz)
        self.horizontalSlider_3.valueChanged.connect(self.load_tx)
        self.horizontalSlider_4.valueChanged.connect(self.load_ty)
        self.horizontalSlider_5.valueChanged.connect(self.load_tz)
        self.horizontalSlider.setValue(155)
        self.pushButton.clicked.connect(self.load_frame) # type: ignore
        self.pushButton_2.clicked.connect(self.image.clear) # type: ignore

        # _translate = QtCore.QCoreApplication.translate

        #added code


    # def retranslateUi(self, MainWindow):
    #     _translate = QtCore.QCoreApplication.translate
    #     MainWindow.setWindowTitle(_translate("MainWindow", "Extrinsic UI"))
    #     self.image.setText(_translate("MainWindow", "TextLabel"))
    #     self.rx.setText(_translate("MainWindow", "rx"))
    #     self.ry.setText(_translate("MainWindow", "ry"))
    #     self.rz.setText(_translate("MainWindow", "rz"))
    #     self.tx.setText(_translate("MainWindow", "tx"))
    #     self.ty.setText(_translate("MainWindow", "ty"))
    #     self.tz.setText(_translate("MainWindow", "tz"))
    #     self.rx_value.setText(_translate("MainWindow", "0"))
    #     self.ry_value.setText(_translate("MainWindow", "0"))
    #     self.rz_value.setText(_translate("MainWindow", "0"))
    #     self.tx_value.setText(_translate("MainWindow", "0"))
    #     self.ty_value.setText(_translate("MainWindow", "0"))
    #     self.tz_value.setText(_translate("MainWindow", "0"))
    #     self.pushButton.setText(_translate("MainWindow", "NextFrame"))
    #     self.pushButton_2.setText(_translate("MainWindow", "PushButton"))

    def setPhoto(self, image):
        self.tmp = image
        image = imutils.resize(image, width=671, height=331)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame,frame.shape[1],frame.shape[0], frame.strides[0], QImage.Format.Format_RGB888)
        self.image.setPixmap(QtGui.QPixmap.fromImage(image))

    # def load_frame(self):
    #     # Read recording
    #     self.i = next(self.bags)
    #     while self.i.topic != "/Camera":
    #         self.i = next(self.bags)
    #
    #
    #     self.image_np = imgmsg_to_cv2(self.i.message)
    #     #print(image_np)
    #     self.setPhoto(self.image_np)

    def load_frame(self):
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]
        self.connection, self.timestamp, self.rawdata = next(self.bags)
        while not self.frame.full_data:
            self.connection, self.timestamp, self.rawdata = next(self.bags)
            self.msg = deserialize_cdr(self.rawdata, self.connection.msgtype)
            self.msg.topic = self.connection.topic
            self.sensor = self.frame.load_data(self.msg)
            if self.sensor == "/Radar":
                self.npts = self.frame.radar.width
                self.arr_all = pc2_numpy(self.frame.radar, self.npts)
                self.arr_concat = self.arr_all
                self.p_arr_all = self.arr_concat.copy()

        self.image_np = imgmsg_to_cv2(self.frame.camera)
        print(self.image_np.shape)
        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        print(1)
        print(self.RX)

    def load_rx(self):
        self.RX = self.horizontalSlider.value()/100
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.rx_value.setText("%.2f"%(self.RX))

    def load_ry(self):
        self.RY = self.horizontalSlider_6.value()/100
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.ry_value.setText("%.2f"%(self.RY))

    def load_rz(self):
        self.RZ = self.horizontalSlider_2.value()/100-1.57
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.rz_value.setText("%.2f"%(self.RZ))

    def load_tx(self):
        self.TX = self.horizontalSlider_3.value()/10 -5
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.tx_value.setText("%.2f"%(self.TX))

    def load_ty(self):
        self.TY = self.horizontalSlider_4.value()/10-5
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.ty_value.setText("%.2f"%(self.TY))

    def load_tz(self):
        self.TZ = self.horizontalSlider_5.value()/10-5
        self.mtx[0, :] = self.intrinsic[0:3]
        self.mtx[1, :] = self.intrinsic[3:6]
        self.mtx[2, :] = self.intrinsic[6:]

        self.arr = filter_zero(self.arr_all)
        # draw points on plt figure
        self.pc = self.arr[:, :4]
        self.ped_box = np.empty((0, 5))
        total_box, self.cls = dbscan_cluster(self.pc, eps=2, min_sample=20)
        # yolo detection
        # cam1, detection = detect(source=cam1, model=model, device=device, colors=colors, names=names,
        #                              view_img=False)
        self.r2c = cam_radar(self.RX, self.RY, self.RZ, self.TX, self.TY, self.TZ, self.mtx)

        # extrinsic radar -> pixel coordinate
        # radar -> camera coordinate
        # radar_cam_coord -> rotx(alpha) * radar_cam_coord -> world coordinate with origin at radar (pitch about 5 degree)
        self.new_cam1, cam_arr = render_radar_on_image(self.arr_all, self.image_np, self.r2c, 9000, 9000)
        if self.cls:
            for cc in self.cls:
                bbox = get_bbox_cls(cc)
                bbox = get_bbox_coord(bbox[0], bbox[1], bbox[2], bbox[3], bbox[4], bbox[5], 0)
                bbox = project_to_image(bbox, self.r2c)
                draw_projected_box3d(self.new_cam1, bbox)
                xyz = np.mean(cc, axis=0).reshape((-1, 1))
                xyz = xyz[:3, :]
                cent = project_to_image(xyz, self.r2c)
                cent = (int(cent[0, 0]), int(cent[1, 0]))
                self.new_cam1 = cv2.circle(self.new_cam1, cent, 5, (255, 255, 0), thickness=2)
        self.setPhoto(self.new_cam1)
        self.frame.clear_data()
        self.tz_value.setText("%.2f"%(self.TZ))

footage = "record/working.bag"
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = Ui_MainWindow()
    MainWindow.show()
    app.exec()

